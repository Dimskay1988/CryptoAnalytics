from datetime import datetime, date, time
from django.conf import settings
from apps.Employees.models import Profile, MessageProfile
from apps.Coin.models import Coins
from telebot import types
import telebot
import time

bot = telebot.TeleBot(token=settings.TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    if Profile.objects.filter(id_telegram=message.chat.id).exists():
        rmk = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        rmk.add(types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'),
                types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã'),
                types.KeyboardButton('HitGab'))
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=rmk)
        bot.register_next_step_handler(msg, user_reply)
    else:
        bot.send_message(message.chat.id,
                         f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –Ω–µ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
        rmk = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        rmk.add(types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'))
        msg = bot.send_message(message.chat.id, '–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=rmk)
        bot.register_next_step_handler(msg, user_reply)


@bot.message_handler(commands=['admin'])
def admin(message):
    bot.send_message(message.chat.id, 'https://t.me/Dimskay1')
    return start(message)


@bot.message_handler(commands=['stats'])
def stats(message):
    profile = Profile.objects.filter(id_telegram=message.chat.id).values()
    bot.send_message(message.chat.id, F'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {profile[0]["username"]} ')
    return start(message)


def user_reply(message):
    if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        return new_user(message)
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã':
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton("Litecoin")
        btn2 = types.KeyboardButton("Ethereum")
        btn3 = types.KeyboardButton("Cardano")
        btn4 = types.KeyboardButton("Tether")
        btn5 = types.KeyboardButton("Bitcoin")
        btn6 = types.KeyboardButton("Solana")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=markup)
        bot.register_next_step_handler(msg, choice_cryptocurrency)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç':
        return coin_price(message)
    elif message.text == 'HitGab':
        bot.send_message(message.chat.id, 'https://github.com/Dimskay1988/CryptoAnalytics')
        return start(message)
    else:
        return start(message)


def new_user(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    bot.register_next_step_handler(msg, new_username)


def new_username(message):
    username = message.text
    msg = bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    bot.register_next_step_handler(msg, new_password, username)


def new_password(message, username):
    password = message.text
    bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {username}')
    Profile.objects.update_or_create(id_telegram=message.chat.id, defaults={'username': username, 'password': password})
    return start(message)


def coin_price(message):
    data = Coins.objects.all()
    coin = ''
    for co in data:
        coin += f'–ö—Ä–∏–ø—Ç–∞–≤–∞–ª—é—Ç–∞: {co.name.upper()}, USD={co.usd}, EUR={co.eur}, UAH={co.uah}, CNY={co.cny}\n'
    bot.send_message(message.chat.id, f'{coin}')
    return start(message)


def choice_cryptocurrency(message):
    currency = message.text
    bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {currency}')
    if (currency.lower()) in ['bitcoin', 'litecoin', 'ethereum', 'solana', 'cardano', 'tether']:
        rmk = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton("USD")
        btn2 = types.KeyboardButton("EUR")
        btn3 = types.KeyboardButton("UAH")
        btn4 = types.KeyboardButton("CNY")
        rmk.add(btn1, btn2, btn3, btn4)
        msg = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup=rmk)
        bot.register_next_step_handler(msg, coin, currency)
    else:
        return start(message)


def coin(message, currency):
    coin = message.text
    if (coin.lower()) in ['usd', 'eur', 'uah', 'cny']:
        bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {currency} –≤ {coin}')
        data = Coins.objects.filter(name=(currency.lower())).values((coin.lower()))
        well = ''
        for i in data:
            well += str(i[f'{coin.lower()}'])
        profile = Profile.objects.filter(id_telegram=message.chat.id)
        MessageProfile.objects.create(id_profile=profile[0], coin=coin, currency=currency, price=well,
                                      tracking_status='Start tracking')
        bot.send_message(message.chat.id, f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å {currency} {well} {coin.upper()}')
        return start(message)


# def coin(message, currency):
#     coin = message.text
#     if (coin.lower()) in ['usd', 'eur', 'uah', 'cny']:
#         bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {currency} –≤ {coin}')
#         data = Coins.objects.filter(name=(currency.lower())).values((coin.lower()))
#         well = ''
#         for i in data:
#             well += str(i[f'{coin.lower()}'])
#         profile = Profile.objects.filter(id_telegram=message.chat.id)
#         MessageProfile.objects.create(id_profile=profile[0], coin=coin, currency=currency, price=well,
#                                       tracking_status='Start tracking')
#         bot.send_message(message.chat.id, f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å {currency} {well} {coin.upper()}')
#         rmk = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
#         btn1 = types.KeyboardButton("–ü–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω–æ–π –≤–∞–ª—é—Ç—ã")
#         # btn2 = types.KeyboardButton("–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ ‚¨Ü")
#         # btn3 = types.KeyboardButton("–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ ‚¨á")
#         rmk.add(btn1)  # rmk.add(btn1, btn2, btn3)
#         msg = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=rmk)
#         bot.register_next_step_handler(msg, task, coin, currency)
#     else:
#         bot.send_message(message.chat.id, f'–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É')
#         return start(message)
#
#
# def task(message, coin, currency):
#     key = []
#     message_keybord = message.text
#     if message_keybord == "–ü–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤—ã–±—Ä–∞–Ω–æ–π –≤–∞–ª—é—Ç—ã":
#         key.append(1)
#         bot.send_message(message.chat.id, f'–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º–º –∫—É—Ä—Å–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É')
#     elif message_keybord == '–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ ‚¨Ü':
#         key.append(2)
#         bot.send_message(message.chat.id, f'–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫—É—Ä—Å –ø–æ–≤—ã—Å–∏—Ç—Å—è')
#     elif message_keybord == '–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ ‚¨á':
#         key.append(3)
#         bot.send_message(message.chat.id, f'–í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫—É—Ä—Å —É–º–µ–Ω—å—à–∏—Ç—Å—è')
#     return message_task(message, coin, currency)
#
#
# def message_task(message, coin, currency):
#     profile = Profile.objects.filter(id_telegram=message.chat.id).values()
#     well_message = MessageProfile.objects.filter(id_profile=profile[0]['id'])
#     wel_price = (float(well_message.values().order_by('-id')[:1][0]['price']))  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∫—É—Ä—Å
#     well_coin = Coins.objects.filter(name=(currency.lower())).values((coin.lower()))
#     wel = (float(well_coin[0][f'{coin.lower()}']))  # –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
#     prof = Profile.objects.filter(id_telegram=message.chat.id)
#     ikm = types.InlineKeyboardMarkup()
#     button1 = types.InlineKeyboardButton("–°–¢–û–ü", callback_data='stop')
#     ikm.add(button1)
#     if wel_price > wel:
#         bot.send_message(message.chat.id, f' ‚¨á –ö—É—Ä—Å 1 {currency} = {wel} {coin}', reply_markup=ikm)
#         MessageProfile.objects.create(id_profile=prof[0], coin=coin, currency=currency, price=wel,
#                                       tracking_status='Trecking')
#     elif wel_price == wel:
#         bot.send_message(message.chat.id, f' üü∞Ô∏è –ö—É—Ä—Å 1 {currency} = {wel} {coin}', reply_markup=ikm)
#     elif wel_price < wel:
#         bot.send_message(message.chat.id, f' ‚¨Ü –ö—É—Ä—Å 1 {currency} = {wel} {coin}', reply_markup=ikm)
#         MessageProfile.objects.create(id_profile=prof[0], coin=coin, currency=currency, price=wel,
#                                       tracking_status='Trecking')
#
#     if MessageProfile.objects.filter(
#             id_profile=Profile.objects.filter(id_telegram=message.chat.id).values('id')[0]['id']).values().order_by(
#         '-id')[:1][0]['tracking_status'] != 'Stop':
#         message_task(message, coin, currency)
#         print(MessageProfile.objects.filter(
#             id_profile=Profile.objects.filter(id_telegram=message.chat.id).values('id')[0]['id']).values().order_by(
#             '-id')[:1][0]['tracking_status'])
#     else:
#         print('—Å—Ä–∞–±–æ—Ç–∞–ª–æ else')
#         return
#
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback(call):
#     if call.data == 'stop':
#         print("–°–¢–û–ü")
#         profile = Profile.objects.filter(id_telegram=call.message.chat.id)
#         MessageProfile.objects.create(id_profile=profile[0], coin='Stop', currency='Stop', price=0.1,
#                                       tracking_status='Stop')
#         return start(call.message), message_task(call.message, coin='bitcoin', currency='usd')


bot.polling(none_stop=True)
