import json
import string
from datetime import datetime, date, time
from django.conf import settings
from apps.Employees.models import Profile, MessageProfile
from apps.Coin.models import Coins
from apps.Coin.views import CoinsView
from telebot import types
import telebot
import time

bot = telebot.TeleBot(token=settings.TOKEN)


def registration():
    pass


@bot.message_handler(commands=['start'])
def start(message):
    rmk = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    rmk.add(types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'),
            types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∏–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º'),
            types.KeyboardButton('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'),
            types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –≤–∞–ª—é—Ç—É'),
            types.KeyboardButton('HitGab'))
    msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=rmk)
    bot.register_next_step_handler(msg, user_reply)


def user_reply(message):
    if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –∏–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º':
        Profile.objects.update_or_create(id_user=message.chat.id, defaults={'name': message.from_user.first_name,
                                                                            'surname': message.from_user.last_name})
        bot.send_message(message.chat.id,
                         f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫: {message.from_user.first_name} {message.from_user.last_name}')
    elif message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        bot.register_next_step_handler(msg, new_user_name)
    elif message.text == '–í—ã–±—Ä–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –≤–∞–ª—é—Ç—É':
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton("Litecoin")
        btn2 = types.KeyboardButton("Ethereum")
        btn3 = types.KeyboardButton("Cardano")
        btn4 = types.KeyboardButton("Tether")
        btn5 = types.KeyboardButton("Bitcoin")
        btn6 = types.KeyboardButton("Solana")
        markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É', reply_markup=markup)
        bot.register_next_step_handler(msg, choice_cryptocurrency)
    elif message.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç':
        msg = bot.send_message(message.chat.id, '–≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–≤–æ–ª')
        bot.register_next_step_handler(msg, coin_price)
    elif message.text == 'HitGab':
        bot.send_message(message.chat.id, 'https://github.com/Dimskay1988/CryptoAnalytics')
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')


def new_user_name(message):
    last_name = message.text
    msg = bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ {last_name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
    bot.register_next_step_handler(msg, new_last_name, last_name)


def new_last_name(message, last_name):
    first_name = message.text
    Profile.objects.update_or_create(id_user=message.chat.id, defaults={'name': last_name, 'surname': first_name})
    msg = bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {last_name} {first_name}')
    bot.register_next_step_handler(msg, start)  # —Ö–∑ –º–æ–∂–µ—Ç –∏ –Ω–µ –Ω–∞–¥–æ


def coin_price(message):
    if Profile.objects.filter(id_user=message.chat.id).exists():
        data = Coins.objects.all()
        coin = ''
        for co in data:
            dat = co.updated_at.date()
            tim = str(co.updated_at.time()).split('.')
            coin += f'–ö—Ä–∏–ø—Ç–∞–≤–∞–ª—é—Ç–∞: {co.name.upper()}, USD={co.usd}, EUR={co.eur}, UAH={co.uah}, CNY={co.cny}\n'
        msg = bot.send_message(message.chat.id, f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å {dat} {tim[0]}: \n{coin}')
        bot.register_next_step_handler(msg, user_reply)
    else:
        msg = bot.send_message(message.chat.id, f'–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        bot.register_next_step_handler(msg, user_reply)


def choice_cryptocurrency(message):
    currency = message.text
    bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {currency}')
    if (currency.lower()) in ['bitcoin', 'litecoin', 'ethereum', 'solana', 'cardano', 'tether']:
        rmk = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton("USD")
        btn2 = types.KeyboardButton("EUR")
        btn3 = types.KeyboardButton("UAH")
        btn4 = types.KeyboardButton("CNY")
        rmk.add(btn1, btn2, btn3, btn4)
        msg = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É', reply_markup=rmk)
        bot.register_next_step_handler(msg, coin, currency)
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ")


def coin(message, currency):
    coin = message.text
    if (coin.lower()) in ['usd', 'eur', 'uah', 'cny']:
        bot.send_message(message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {currency} –≤ {coin}')
        data = Coins.objects.filter(name=(currency.lower())).values((coin.lower()))
        well = ''
        for i in data:
            well += str(i[f'{coin.lower()}'])
        profil = Profile.objects.filter(id_user=message.chat.id)
        MessageProfile.objects.create(id_profile=profil[0], coin=coin, currency=currency, price=well)
        bot.send_message(message.chat.id, f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å {currency} {well} {coin.upper()}')
        rmk = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        btn1 = types.KeyboardButton("–ü–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤—ã–±—Ä–æ–Ω–æ–π –≤–∞–ª—é—Ç—ã")
        # btn2 = types.KeyboardButton("–ø—Ä–∏—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∫—É—Ä—Å –≤—ã—Ä–æ—Å—Ç–µ—Ç")
        # btn3 = types.KeyboardButton("–ü—Ä–∏—Å–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∫—É—Ä—Å —Å—Ç–∞–Ω–µ—Ç –Ω–∏–∂–µ")
        rmk.add(btn1) ### rmk.add(btn1, btn2, btn3)
        msg = bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=rmk)
        bot.register_next_step_handler(msg, task, coin, currency)
    else:
        bot.send_message(message.chat.id, f'–í—ã –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç—É')


def task(message, coin, currency):
    while True:
        time.sleep(60)
        ikm = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–°–¢–û–ü", callback_data='stop')
        ikm.add(button1)

        profil = Profile.objects.filter(id_user=message.chat.id).values()
        well_message = MessageProfile.objects.filter(id_profile=profil[0]['id'])
        wel_price = (float(well_message.values().order_by('-id')[:1][0]['price']))

        well_coin = Coins.objects.filter(name=(currency.lower())).values((coin.lower()))
        wel = (float(well_coin[0][f'{coin.lower()}']))
        if wel_price > wel:
            bot.send_message(message.chat.id, f' ‚¨áÔ∏è  –ö—É—Ä—Å 1 {currency} = {wel} {coin}', reply_markup=ikm)
            profil = Profile.objects.filter(id_user=message.chat.id)
            MessageProfile.objects.create(id_profile=profil[0], coin=coin, currency=currency, price=wel)
        elif wel_price == wel:
            bot.send_message(message.chat.id, f' üü∞Ô∏è  –ö—É—Ä—Å 1 {currency} = {wel} {coin}', reply_markup=ikm)
        else:
            bot.send_message(message.chat.id, f' ‚¨ÜÔ∏èÔ∏è  –ö—É—Ä—Å 1 {currency} = {wel} {coin}', reply_markup=ikm)
            profil = Profile.objects.filter(id_user=message.chat.id)
            MessageProfile.objects.create(id_profile=profil[0], coin=coin, currency=currency, price=wel)


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.message:
        if call.data == 'stop':
            bot.send_message(call.message.chat.id, f'C—Ç–æ–ø –±–æ—Ç')
            mgs = bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å')
            bot.register_next_step_handler(mgs, start)


bot.polling(none_stop=True)
